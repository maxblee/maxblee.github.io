{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport * as shlex from \"shlex\";\n\n\texport let clipivot_core;\n\n\tlet rowOrder = \"index\";\n\t$: rowOrderPresentation = (rowOrder === \"index\") ? \"\" : (rowOrder === \"ascending\") ? \"--asc-rows\" : \"--desc-rows\";\n\tlet columnOrder = \"ascending\";\n\t$: colOrderPresentation = (columnOrder === \"ascending\") ? \"\" : (columnOrder === \"descending\") ? \"--desc-cols\" : \"--index-cols\";\n\tlet ignoreEmpty = false;\n\t$: ignoreEmptyFlag = ignoreEmpty ? \"-e\" : \"\";\n\tlet includeHeader = true;\n\t$: includeHeaderFlag = includeHeader ? \"\" : \"--no-header\";\n\tlet delim = \",\";\n\t$: delimPresent = (delim === \",\") ? \"\" : (delim === \"\\\\t\") ? \"-t\" : `-d ${shlex.quote(delim)}`;\n\tlet aggtype = \"text\";\n\tlet allFuncs = [\n\t\t{name: \"Count\", value: \"count\"},\n\t\t{name: \"Unique Count\", value: \"countunique\"},\n\t\t{name: \"Maximum\", value: \"max\"},\n\t\t{name: \"Mean\", value: \"mean\"},\n\t\t{name: \"Minimum\", value: \"min\"},\n\t\t{name: \"Minimum and Maximum\", value: \"minmax\"},\n\t\t{name: \"Mode\", value: \"mode\"},\n\t\t{name: \"Range\", value: \"range\"},\n\t\t{name: \"Sample Standard Deviation\", value: \"stddev\"},\n\t\t{name: \"Sum\", value: \"sum\"}\n\t];\n\tlet availableFunctions = allFuncs;\n\t$: if (aggtype === \"text\") {\n\t\tavailableFunctions = allFuncs\n\t\t.filter(d => [\"count\", \"countunique\", \"max\", \"min\", \"minmax\"].includes(d.value));\n\t}\n\t$: if (aggtype === \"numeric\") {\n\t\tavailableFunctions = allFuncs\n\t\t.filter(d => [\"count\", \"countunique\", \"max\", \"mean\", \"median\", \"min\", \"minmax\", \"range\", \"stddev\", \"sum\"].includes(d.value));\n\t}\n\t$: if (aggtype === \"date\") {\n\t\tavailableFunctions = allFuncs\n\t\t.filter(d => [\"count\", \"countunique\", \"max\", \"min\", \"minmax\", \"range\"].includes(d.value));\n\t}\n\tlet aggFunc = \"count\";\n\t$: numFormat = (aggtype === \"numeric\" && [\"max\", \"min\", \"minmax\"].includes(aggFunc)) ? \"-N\" : \"\";\n\tlet dateFormat;\n\t$: if (aggtype !== \"date\") {dateFormat = undefined;}\n\t$: dateFmtPresent = (dateFormat === undefined) ? \"\" : `-F ${shlex.quote(dateFormat)}`;\n\n\tlet inputFiles = [];\n\t$: inputFile = inputFiles[0];\n\t$: fileName = (inputFile === undefined) ? \"\" : shlex.quote(inputFile.name);\n\n\tlet headerRow;\n\tlet errorMsg;\n\n\tlet pivotCols = [];\n\tlet pivotRows = [];\n\tlet pivotVal = 0;\n\n\t$: colPresent = (pivotCols.length === 0) ? \"\" : \"--cols \" + pivotCols.join(\" \");\n\t$: rowPresent = (pivotRows.length === 0) ? \"\" : \"--rows \" + pivotRows.join(\" \");\n\t$: valPresent = `-v ${pivotVal}`;\n\n\t// the filter stops there from being multiple spaces in the code section\n\t$: cliOpts = [\n\t\tcolPresent,\n\t\trowPresent,\n\t\tdelimPresent,\n\t\tincludeHeaderFlag,\n\t\tignoreEmptyFlag,\n\t\tnumFormat,\n\t\tdateFmtPresent,\n\t\trowOrderPresentation,\n\t\tcolOrderPresentation\n\t].filter(d => d !== \"\");\n\n\t$: cmd = `clipivot ${aggFunc} ${fileName} ${valPresent} ${cliOpts.join(' ')}`;\n\n\tasync function parseHeader() {\n\t\tlet headerResult = await clipivot_core.read_header(inputFile.stream(), delim);\n\t\terrorMsg = headerResult.errorMessage;\n\t\t// if you didn't get an error message\n\t\tif (headerResult.data !== null) {\n\t\t\theaderRow = headerResult.data[0];\n\t\t}\n\t}\n\n\tasync function copyClipboard() {\n\t\tawait navigator.clipboard.writeText(cmd);\n\t}\n\n\tlet pivotResults;\n\tlet numPivotRows;\n\tlet numPivotCols;\n\tlet loading = false;\n\n\tasync function parsePivotTable() {\n\t\tif (!inputFile) { errorMsg = \"You must add a file to run the pivot table\";}\n\t\tnumPivotCols = pivotCols.length;\n\t\tnumPivotRows = pivotRows.length;\n\t\tloading = true;\n\t\t// set the number of pivot table rows  and cols so we can bold them and split them later\n\t\treturn await clipivot_core.pivot_table(\n\t\t\tinputFile.stream(),\n\t\t\taggFunc,\n\t\t\tdelim,\n\t\t\tincludeHeader,\n\t\t\tpivotRows,\n\t\t\tpivotCols,\n\t\t\tpivotVal,\n\t\t\tignoreEmpty,\n\t\t\trowOrder,\n\t\t\tcolumnOrder,\n\t\t\taggtype,\n\t\t\tdateFormat\n\t\t)\n\t\t.then((data) => {\n\t\t\tloading = false;\n\t\t\tif (data.errorMessage !== null) {\n\t\t\terrorMsg = data.errorMessage;\n\t\t\tthrow new Error(errorMsg);\n\t\t\t}\n\t\t\telse { \n\t\t\t\terrorMsg = undefined;\n\t\t\t\tlet blob = new Blob([data.csvContent], {type: \"text/csv\"});\n\t\t\t\tlet blobHref = window.URL.createObjectURL(blob);\n\t\t\t\treturn {\n\t\t\t\t\tdata: data.data,\n\t\t\t\t\tcsvHref: blobHref\n\t\t\t\t};\n\t\t\t}\n\t\t})\n\t\t.catch((err) => {});\n\t}\n\n\tfunction buildPivotTable(e) {\n\t\te.preventDefault();\n\t\tpivotResults = parsePivotTable();\n\t}\n</script>\n\n<form>\n\t<div id=\"form-container\">\n\t\t<div class=\"sorting\">\n\t\t\t<fieldset>\n\t\t\t\t<legend>Row Order</legend>\n\t\t\t\t<p class=\"help\">How do you want to sort the rows of the pivot table?</p>\n\t\t\t\t<div class=\"radio-fields\">\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<input type=radio bind:group={rowOrder} value={\"index\"}>\n\t\t\t\t\t\tIndex Order\n\t\t\t\t\t</label>\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<input type=radio bind:group={rowOrder} value={\"ascending\"}>\n\t\t\t\t\t\tAscending Order\n\t\t\t\t\t</label>\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<input type=radio bind:group={rowOrder} value={\"descending\"}>\n\t\t\t\t\t\tDescending Order\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t</fieldset>\n\t\t\t<fieldset>\n\t\t\t\t<legend>Column Order</legend>\n\t\t\t\t<p class=\"help\">How do you want to sort the columns of the pivot table?</p>\n\t\t\t\t<label>\n\t\t\t\t\t<input type=radio bind:group={columnOrder} value={\"ascending\"}>\n\t\t\t\t\tAscending Order\n\t\t\t\t</label>\n\t\t\t\t<label>\n\t\t\t\t\t<input type=radio bind:group={columnOrder} value={\"descending\"}>\n\t\t\t\t\tDescending Order\n\t\t\t\t</label>\n\t\t\t\t<label>\n\t\t\t\t\t<input type=radio bind:group={columnOrder} value={\"index\"}>\n\t\t\t\t\tIndex Order\n\t\t\t\t</label>\n\t\t\t</fieldset>\n\t\t</div>\n\t\t<div class=\"data-type\">\n\t\t<fieldset>\n\t\t\t<legend>Data Type</legend>\n\t\t\t<p class=\"help\">What type of data are you aggregating?</p>\n\t\t\t<label>\n\t\t\t\t<input type=radio bind:group={aggtype} value={\"text\"}>\n\t\t\t\tText\n\t\t\t</label>\n\t\t\t<label>\n\t\t\t\t<input type=radio bind:group={aggtype} value={\"numeric\"}>\n\t\t\t\tNumeric\n\t\t\t</label>\n\t\t\t<label>\n\t\t\t\t<input type=radio bind:group={aggtype} value={\"date\"}>\n\t\t\t\tDate\n\t\t\t</label>\n\t\t</fieldset>\n\t\t</div>\n\t\t<div class=\"question-container\">\n\t\t\t<div class=\"question-container-inner\">\n\t\t\t\t<label for=\"aggfunc-select\">\n\t\t\t\t\tWhat aggregation function do you want to use?\n\t\t\t\t</label>\n\t\t\t\t<select id=\"aggfunc-select\" bind:value={aggFunc}>\n\t\t\t\t\t{#each availableFunctions as func}\n\t\t\t\t\t<option value={func.value}>{func.name}</option>\n\t\t\t\t\t{/each}\n\t\t\t\t</select>\n\t\t\t</div>\n\t\t</div>\n\t\t{#if aggtype === \"date\"}\n\t\t<label>Date Format\n\t\t\t<p class=\"help\">Select a date format conforming to <a href=\"https://docs.rs/chrono/0.4.9/chrono/format/strftime/index.html\">these specifications.</a></p>\n\t\t\t<input bind:value={dateFormat}>\n\t\t</label>\n\t\t{/if}\n\t\t<div class=\"ignore-handle-container\">\n\t\t\t<div class=\"ignore-handle\">\n\t\t\t\t<label>\n\t\t\t\t\t<input type=radio on:click={() => {ignoreEmpty = !ignoreEmpty;}} checked={ignoreEmpty}>\n\t\t\t\t\tIgnore null values in aggregation column\n\t\t\t\t</label>\n\t\t\t\t<label>\n\t\t\t\t\t<input type=radio on:click={() => {includeHeader = !includeHeader;}} checked={!includeHeader}>\n\t\t\t\t\tIgnore the header\n\t\t\t\t</label>\n\t\t\t\t<label>\n\t\t\t\t\t<input id=\"delimiter\" bind:value={delim}>\n\t\t\t\t\tDelimiter\n\t\t\t\t</label>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"question-container\">\n\t\t\t<div class=\"question-container-inner\">\n\t\t\t\t<label for=\"file-upload\">\n\t\t\t\t\tAdd your file\n\t\t\t\t</label>\n\t\t\t\t<input type=\"file\" id=\"file-upload\" bind:files={inputFiles} on:change={parseHeader}>\n\t\t\t</div>\n\t\t</div>\n\t\t{#if headerRow}\n\t\t<div class=\"header-section\">\n\t\t\t<div class=\"pivot-field\">\n\t\t\t\t<fieldset>\n\t\t\t\t\t<legend>Rows</legend>\n\t\t\t\t\t<p class=\"help\">Which columns do you want to serve as the rows for your pivot table?</p>\n\t\t\t\t\t{#each headerRow as header, count}\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<input type=checkbox bind:group={pivotRows} value={count}>\n\t\t\t\t\t\t{includeHeader ? header : `Column ${count}`}\n\t\t\t\t\t</label>\n\t\t\t\t\t{/each}\n\t\t\t\t</fieldset>\n\t\t\t</div>\n\t\t\t<div class=\"pivot-field\">\n\t\t\t\t<fieldset>\n\t\t\t\t\t<legend>Columns</legend>\n\t\t\t\t\t<p class=\"help\">Which columns do you want to serve as the columns for your pivot table</p>\n\t\t\t\t\t{#each headerRow as header, count}\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<input type=checkbox bind:group={pivotCols} value={count}>\n\t\t\t\t\t\t{includeHeader ? header : `Column ${count}`}\n\t\t\t\t\t</label>\n\t\t\t\t\t{/each}\n\t\t\t\t</fieldset>\n\t\t\t</div>\n\t\t\t<div class=\"pivot-field\">\n\t\t\t\t<fieldset>\n\t\t\t\t\t<legend>Value</legend>\n\t\t\t\t\t<p class=\"help\">Which column do you want to aggregate values over?</p>\n\t\t\t\t\t{#each headerRow as header, count}\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<input type=radio bind:group={pivotVal} value={count}>\n\t\t\t\t\t\t{includeHeader ? header : `Column ${count}`}\n\t\t\t\t\t</label>\n\t\t\t\t\t{/each}\n\t\t\t\t</fieldset>\n\t\t\t</div>\n\t\t</div>\n\t\t{/if}\n\t</div>\n\t<div class=\"submit-section\">\n\t\t<button type=\"submit\" on:click={buildPivotTable}>Create pivot table</button>\n\t</div>\n</form>\n<div class=\"error-panel\">\n\t{#if errorMsg}\n\t<pre class=\"inline-highlight\">\n\t\t<code><b>Error:</b> {errorMsg}</code>\n\t</pre>\n\t{/if}\n</div>\n<div class=\"output-container\">\n\t<div class=\"command-container\">\n\t\t<pre id=\"clipivot-command\" class=\"inline-highlight\">\n\t\t\t<code>\n\t\t\t\t$ {cmd}\n\t\t\t</code>\n\t\t\t<div class=\"copy-icon\" aria-label=\"Copy generated clipivot command to clipboard\">\n\t\t\t\t<svg width=\"25px\" on:click={copyClipboard} xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n\t\t\t\t\t<path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2\" />\n\t\t\t\t  </svg>\n\t\t\t</div>\n\t\t</pre>\n\t</div>\n\t<div class=\"table-output-container\">\n\t<div class=\"table-output\">\n\t\t{#if pivotResults}\n\t\t{#await pivotResults}\n\t\t{#if loading}\n\t\t\t<div class=\"loading-container\">\n\t\t\t\t<div class=\"loader-icon\"></div>\n\t\t\t\t<div class=\"loader\">Loading&hellip;</div>\n\t\t\t</div>\n\t\t\t{/if}\n\t\t{:then data}\n\t\t<div class=\"download-link\">\n\t\t\t<button type=\"button\"><a href={data.csvHref} download=\"pivot-table-download.csv\">Download Results</a></button>\n\t\t</div>\n\t\t<div class=\"data-table\">\n\t\t<table>\n\t\t\t{#if numPivotCols >= 2}\n\t\t\t<tr>\n\t\t\t\t{#each [...Array(Math.max(numPivotRows - 1, 0)).keys()] as _}\n\t\t\t\t<th></th>\n\t\t\t\t{/each}\n\t\t\t\t{#each data.data[0] as _}\n\t\t\t\t<th colspan={numPivotCols} scope=\"colgroup\"></th>\n\t\t\t\t{/each}\n\t\t\t</tr>\n\t\t\t{/if}\n\t\t\t\t{#each data.data as row, rowCount}\n\t\t\t\t\t<tr class={rowCount % 2 === 0 ? \"even-row\" : \"odd-row\"}>\n\t\t\t\t\t{#each row as cell, colCount}\n\t\t\t\t\t\t{#if rowCount === 0}\n\t\t\t\t\t\t\t{#each [...Array(Math.max(numPivotRows - 1, 0)).keys()] as _}\n\t\t\t\t\t\t\t\t<th></th>\n\t\t\t\t\t\t\t{/each}\n\t\t\t\t\t\t\t{#each cell.split(\"_<sep>_\") as headerColCell}\n\t\t\t\t\t\t\t\t<th scope=\"col\" class={colCount % 2 === 0 ? \"even-col\" : \"odd-col\"}>{headerColCell}</th>\n\t\t\t\t\t\t\t{/each}\n\t\t\t\t\t\t{:else if colCount === 0}\n\t\t\t\t\t\t\t{#each cell.split(\"_<sep>_\") as headerRowCell}\n\t\t\t\t\t\t\t\t<th scope=\"row\" class={colCount % 2 === 0 ? \"even-col\" : \"odd-col\"}>{headerRowCell}</th>\n\t\t\t\t\t\t\t{/each}\n\t\t\t\t\t\t{:else}\n\t\t\t\t\t\t\t<td colspan={numPivotCols} class={colCount % 2 === 0 ? \"even-col\" : \"odd-col\"}>{cell}</td>\n\t\t\t\t\t\t{/if}\n\t\t\t\t\t{/each}\n\t\t\t\t\t</tr>\n\t\t\t\t{/each}\n\t\t</table>\n\t\t</div>\n\t\t{/await}\n\t\t{/if}\n\t</div>\n\t</div>\n</div>\n\n<style>\n\tform {\n\t\twidth: 95%;\n\t\tmargin: auto;\n\t\tborder: 1px dashed rgb(150,150,150);\n\t\tpadding: 3px;\n\t}\n\n\tcode, .copy-icon {\n\t\tdisplay: inline;\n\t}\n\n\t.copy-icon > svg {\n\t\tbackground-color: rgb(215, 217, 249);\n\t\tpadding: 1px;\n\t\tborder-radius: 3px;\n\t\ttransition: 0.5s;\n\t}\n\n\t.copy-icon > svg:hover {\n\t\tcursor: pointer;\n\t\tbackground-color: rgb(153, 158, 255);\n\t}\n\n\t.sorting {\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t}\n\n\t.sorting > fieldset, .ignore-handle > label {\n\t\tdisplay: inline;\n\t}\n\n\t#delimiter {\n\t\tpadding: 0;\n\t\tmax-width: 25px;\n\t}\n\t\n\tlabel {\n\t\tdisplay: inline-block;\n\t}\n\n\t.command-container {\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t}\n\n\t.error-panel {\n\t\tcolor: red;\n\t\ttext-align: center;\n\t\tpadding-top: 1rem;\n\t}\n\n\t.error-panel > pre {\n\t\tborder: 2px dashed;\n\t\tpadding: 7px;\n\t}\n\n\t.header-section {\n\t\tdisplay: flex;\n\t}\n\n\t.pivot-field > fieldset > label {\n\t\tdisplay: block;\n\t}\n\n\t.submit-section {\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t}\n\n\t.ignore-handle-container {\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t}\n\n\t.ignore-handle {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t}\n\n\t.even-row {\n\t\tbackground-color: #A6ABF2;\n\t}\n\n\t.odd-row {\n\t\tbackground-color: #D7D9F9;\n\t}\n\n\t.data-type {\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t}\n\n\t.question-container {\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t}\n\t.question-container-inner {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t}\n\n\t.loader {\n\t\tfont-size: 1.5rem;\n\t}\n\n\t.loader-icon {\n\t\tdisplay: inline-block;\n\t\tborder: 1rem solid white;\n\t\tborder-radius: 50%;\n\t\twidth: 100px;\n\t\theight: 100px;\n\t\t-webkit-animation: spin 1.7s linear infinite;\n \t\tanimation: spin 1.7s linear infinite;\n\t\tborder-top: 1rem solid rgb(153, 158, 255);\n\t}\n\n\t@-webkit-keyframes spin {\n  \t\t0% { -webkit-transform: rotate(0deg); }\n  \t\t100% { -webkit-transform: rotate(360deg); }\n\t}\n\n\t@keyframes spin {\n\t\t0% { transform: rotate(0deg);}\n\t\t100% { transform: rotate(360deg);}\n\t}\n\n\tth, td {\n\t\tpadding: 1ch;\n\t}\n\n\t.table-output {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t}\n\n\t.table-output-container {\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t}\n</style>"
  ],
  "names": [],
  "mappings": "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"
}